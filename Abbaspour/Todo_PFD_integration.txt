    X1. Add process modules as classes based on their dict-entry 
	   "DWSIM-object type" 
    X2. Add process modules as individual of their respective 
	   classes based on their dict-key
    3. Add relation process_module_indv -- has_output -> process_module_indv 
	   for each dict-entry "connection"
-------------------
AUFRUFEN ANDERER FUNKTION, DIE 4. ERLEDIGT, wenn Substance name?	   
	   
    4. Search for Substance names in subdicts of process modules
    -> "EntersAtObject" determines individual of the PFD, 
	    where the substance enters
    --> introduce <process_module_indv + "_" +  Substance_name> as 
	    individual -- part of -> process_module_indv
    --> With hasEnzymeML_ID and key of dict -> ind -- consists_of -> subst_ind
    -> include all other information as dataProperty  (see 5.)
------------
    5. include other information as dataProperty to the individuals
	   Iterate eln_dict["PFD"] and add all missing dataProperties 
	   of the dict to the ontology
	-> exclude "DWSIM-object type", "connection", "EntersAtObject"
	-> exclude all individuals/first level keys
    --> BaseOnto = datProp_from_dict(<DICT>, BaseOnto)
	
	    