# -*- coding: utf-8 -*-
"""
Created on Tue Sep 26 13:42:10 2023

@author: smmcvoel
"""
import time
import yaml
import math
import numpy as np
from scipy.integrate import solve_ivp, odeint


def ODESolver_S(y, x):
    # x - length reactor
    # y - concentration of species i
    k=[0.01458, 2199436443.16846, 0.01064, 117591068549.76498, 0.1163, 43271.93269101587, 6.288e-05, 34126.209306143486, 0.3737,
       0.007248713053254616, 2948977440.3028693, 24703.943627797853, 0.8419588727210624, 0.9756537024605241, 64028.03707632365,
       73721595257.95108, 691.367263119121, 1.8381873161299876e+20, 402902.2371366433, 593692.5671051844, 2088.262107584587,
       7.061427392644895e+20, 1607617409191675.0, 14669806446178.172, 2350491467748764.5, 9802674275893.83, 18309311139266.945,
       1786264513107753.2, 43977306830.82615, 4.395178449907699e+16, 1208988872564131.5, 10675524818.340195, 687261530.445125,
       0.006074635777584023, 2124303401.1446967, 1.29732197491555e+17, 2.833490280742555e+16, 3861974187.3059597, 39501811.0759406,
       1.4313159955922637e+18, 1.1355299533139845e-15, 1.5802739069877432e-10]
    
    dydx = np.zeros(20)
    
    #O2
    dydx[0] = 0
    #H2
    dydx[1] = - 1*k[0] * y[6]**-2 * y[1]**-1 * y[7]**2 + 1*k[1] * y[6]**2 * y[1]**1 * y[7]**-2
    #CH4
    dydx[2] = - 1*k[2] * y[6]**-1 * y[2]**-1 * y[8]**1 + 1*k[3] * y[6]**1 * y[2]**1 * y[8]**-1
    # H2O
    dydx[3] = - 1*k[4] * y[6]**-1 * y[3]**-1 * y[9]**1 + 1*k[5] * y[6]**1 * y[3]**1 * y[9]**-1
    # CO2
    dydx[4] = - 1*k[6] * y[6]**-1 * y[4]**-1 * y[10]**1 + 1*k[7] * y[6]**1 * y[4]**1 * y[10]**-1
    # CO
    dydx[5] = - 1*k[8] * y[5]**-1 * y[6]**-1 * y[11]**1 + 1*k[9] * y[5]**1 * y[6]**1 * y[11]**-1
    # Ni
    dydx[6] = - 2*k[0] * y[6]**-2 * y[1]**-1 * y[7]**2 + 2*k[1] * y[6]**2 * y[1]**1 * y[7]**-2 - 1*k[2] * y[6]**-1 * y[2]**-1 * y[8]**1 + 1*k[3] * y[6]**1 * y[2]**1 * y[8]**-1 - 1*k[4] * y[6]**-1 * y[3]**-1 * y[9]**1 + 1*k[5] * y[6]**1 * y[3]**1 * y[9]**-1 - 1*k[6] * y[6]**-1 * y[4]**-1 * y[10]**1 + 1*k[7] * y[6]**1 * y[4]**1 * y[10]**-1 - 1*k[8] * y[5]**-1 * y[6]**-1 * y[11]**1 + 1*k[9] * y[5]**1 * y[6]**1 * y[11]**-1 - 1*k[10] * y[6]**-1 * y[10]**-1 * y[11]**1 * y[12]**1 + 1*k[11] * y[6]**1 * y[10]**1 * y[11]**-1 * y[12]**-1 - 1*k[12] * y[6]**-1 * y[11]**-1 * y[13]**1 * y[12]**1 + 1*k[13] * y[6]**1 * y[11]**1 * y[13]**-1 * y[12]**-1 + 1*k[16] * y[6]**1 * y[15]**1 * y[7]**-1 * y[11]**-1 - 1*k[17] * y[6]**-1 * y[15]**-1 * y[7]**1 * y[11]**1 - 1*k[18] * y[6]**-1 * y[15]**-1 * y[16]**1 * y[12]**1 + 1*k[19] * y[6]**1 * y[15]**1 * y[16]**-1 * y[12]**-1 + 1*k[20] * y[6]**1 * y[16]**1 * y[7]**-1 * y[13]**-1 - 1*k[21] * y[6]**-1 * y[16]**-1 * y[7]**1 * y[13]**1 + 1*k[22] * y[6]**1 * y[17]**1 * y[7]**-1 * y[16]**-1 - 1*k[23] * y[6]**-1 * y[17]**-1 * y[7]**1 * y[16]**1 + 1*k[24] * y[6]**1 * y[18]**1 * y[7]**-1 * y[17]**-1 - 1*k[25] * y[6]**-1 * y[18]**-1 * y[7]**1 * y[17]**1 + 1*k[26] * y[6]**1 * y[8]**1 * y[7]**-1 * y[18]**-1 - 1*k[27] * y[6]**-1 * y[8]**-1 * y[7]**1 * y[18]**1 + 1*k[28] * y[6]**1 * y[14]**1 * y[7]**-1 * y[12]**-1 - 1*k[29] * y[6]**-1 * y[14]**-1 * y[7]**1 * y[12]**1 + 1*k[30] * y[6]**1 * y[9]**1 * y[7]**-1 * y[14]**-1 - 1*k[31] * y[6]**-1 * y[9]**-1 * y[7]**1 * y[14]**1 + 1*k[34] * y[6]**1 * y[19]**1 * y[7]**-1 * y[10]**-1 - 1*k[35] * y[6]**-1 * y[19]**-1 * y[7]**1 * y[10]**1 - 1*k[36] * y[6]**-1 * y[19]**-1 * y[11]**1 * y[14]**1 + 1*k[37] * y[6]**1 * y[19]**1 * y[11]**-1 * y[14]**-1
    # H-Ni
    dydx[7] = + 2*k[0] * y[7]**2 * y[6]**-2 * y[1]**-1 - 2*k[1] * y[7]**-2 * y[6]**2 * y[1]**1 - 1*k[14] * y[7]**-1 * y[11]**-1 * y[13]**1 * y[14]**1 + 1*k[15] * y[7]**1 * y[11]**1 * y[13]**-1 * y[14]**-1 - 1*k[16] * y[7]**-1 * y[11]**-1 * y[6]**1 * y[15]**1 + 1*k[17] * y[7]**1 * y[11]**1 * y[6]**-1 * y[15]**-1 - 1*k[20] * y[7]**-1 * y[13]**-1 * y[6]**1 * y[16]**1 + 1*k[21] * y[7]**1 * y[13]**1 * y[6]**-1 * y[16]**-1 - 1*k[22] * y[7]**-1 * y[16]**-1 * y[6]**1 * y[17]**1 + 1*k[23] * y[7]**1 * y[16]**1 * y[6]**-1 * y[17]**-1 - 1*k[24] * y[7]**-1 * y[17]**-1 * y[6]**1 * y[18]**1 + 1*k[25] * y[7]**1 * y[17]**1 * y[6]**-1 * y[18]**-1 - 1*k[26] * y[7]**-1 * y[18]**-1 * y[6]**1 * y[8]**1 + 1*k[27] * y[7]**1 * y[18]**1 * y[6]**-1 * y[8]**-1 - 1*k[28] * y[7]**-1 * y[12]**-1 * y[6]**1 * y[14]**1 + 1*k[29] * y[7]**1 * y[12]**1 * y[6]**-1 * y[14]**-1 - 1*k[30] * y[7]**-1 * y[14]**-1 * y[6]**1 * y[9]**1 + 1*k[31] * y[7]**1 * y[14]**1 * y[6]**-1 * y[9]**-1 - 1*k[34] * y[7]**-1 * y[10]**-1 * y[6]**1 * y[19]**1 + 1*k[35] * y[7]**1 * y[10]**1 * y[6]**-1 * y[19]**-1 - 1*k[38] * y[7]**-1 * y[19]**-1 * y[15]**1 * y[14]**1 + 1*k[39] * y[7]**1 * y[19]**1 * y[15]**-1 * y[14]**-1
    # CH4-Ni
    dydx[8] = + 1*k[2] * y[8]**1 * y[6]**-1 * y[2]**-1 - 1*k[3] * y[8]**-1 * y[6]**1 * y[2]**1 + 1*k[26] * y[6]**1 * y[8]**1 * y[7]**-1 * y[18]**-1 - 1*k[27] * y[6]**-1 * y[8]**-1 * y[7]**1 * y[18]**1
    # H2O-Ni
    dydx[9] = + 1*k[4] * y[9]**1 * y[6]**-1 * y[3]**-1 - 1*k[5] * y[9]**-1 * y[6]**1 * y[3]**1 + 1*k[30] * y[6]**1 * y[9]**1 * y[7]**-1 * y[14]**-1 - 1*k[31] * y[6]**-1 * y[9]**-1 * y[7]**1 * y[14]**1 + 1*k[32] * y[9]**1 * y[12]**1 * y[14]**-2 - 1*k[33] * y[9]**-1 * y[12]**-1 * y[14]**2
    # CO2-Ni
    dydx[10] = + 1*k[6] * y[10]**1 * y[6]**-1 * y[4]**-1 - 1*k[7] * y[10]**-1 * y[6]**1 * y[4]**1 - 1*k[10] * y[6]**-1 * y[10]**-1 * y[11]**1 * y[12]**1 + 1*k[11] * y[6]**1 * y[10]**1 * y[11]**-1 * y[12]**-1 - 1*k[34] * y[7]**-1 * y[10]**-1 * y[6]**1 * y[19]**1 + 1*k[35] * y[7]**1 * y[10]**1 * y[6]**-1 * y[19]**-1 + 1*k[40] * y[13]**1 * y[10]**1 * y[11]**-2 - 1*k[41] * y[13]**-1 * y[10]**-1 * y[11]**2
    # CO-Ni
    dydx[11] = + 1*k[8] * y[11]**1 * y[5]**-1 * y[6]**-1 - 1*k[9] * y[11]**-1 * y[5]**1 * y[6]**1 + 1*k[10] * y[11]**1 * y[12]**1 * y[6]**-1 * y[10]**-1 - 1*k[11] * y[11]**-1 * y[12]**-1 * y[6]**1 * y[10]**1 - 1*k[12] * y[6]**-1 * y[11]**-1 * y[13]**1 * y[12]**1 + 1*k[13] * y[6]**1 * y[11]**1 * y[13]**-1 * y[12]**-1 - 1*k[14] * y[7]**-1 * y[11]**-1 * y[13]**1 * y[14]**1 + 1*k[15] * y[7]**1 * y[11]**1 * y[13]**-1 * y[14]**-1 - 1*k[16] * y[7]**-1 * y[11]**-1 * y[6]**1 * y[15]**1 + 1*k[17] * y[7]**1 * y[11]**1 * y[6]**-1 * y[15]**-1 + 1*k[36] * y[11]**1 * y[14]**1 * y[6]**-1 * y[19]**-1 - 1*k[37] * y[11]**-1 * y[14]**-1 * y[6]**1 * y[19]**1 - 2*k[40] * y[11]**-2 * y[13]**1 * y[10]**1 + 2*k[41] * y[11]**2 * y[13]**-1 * y[10]**-1
    # O-Ni
    dydx[12] = + 1*k[10] * y[11]**1 * y[12]**1 * y[6]**-1 * y[10]**-1 - 1*k[11] * y[11]**-1 * y[12]**-1 * y[6]**1 * y[10]**1 + 1*k[12] * y[13]**1 * y[12]**1 * y[6]**-1 * y[11]**-1 - 1*k[13] * y[13]**-1 * y[12]**-1 * y[6]**1 * y[11]**1 + 1*k[18] * y[16]**1 * y[12]**1 * y[6]**-1 * y[15]**-1 - 1*k[19] * y[16]**-1 * y[12]**-1 * y[6]**1 * y[15]**1 - 1*k[28] * y[7]**-1 * y[12]**-1 * y[6]**1 * y[14]**1 + 1*k[29] * y[7]**1 * y[12]**1 * y[6]**-1 * y[14]**-1 + 1*k[32] * y[9]**1 * y[12]**1 * y[14]**-2 - 1*k[33] * y[9]**-1 * y[12]**-1 * y[14]**2
    # C-Ni
    dydx[13] = + 1*k[12] * y[13]**1 * y[12]**1 * y[6]**-1 * y[11]**-1 - 1*k[13] * y[13]**-1 * y[12]**-1 * y[6]**1 * y[11]**1 + 1*k[14] * y[13]**1 * y[14]**1 * y[7]**-1 * y[11]**-1 - 1*k[15] * y[13]**-1 * y[14]**-1 * y[7]**1 * y[11]**1 - 1*k[20] * y[7]**-1 * y[13]**-1 * y[6]**1 * y[16]**1 + 1*k[21] * y[7]**1 * y[13]**1 * y[6]**-1 * y[16]**-1 + 1*k[40] * y[13]**1 * y[10]**1 * y[11]**-2 - 1*k[41] * y[13]**-1 * y[10]**-1 * y[11]**2
    # OH-Ni
    dydx[14] = + 1*k[14] * y[13]**1 * y[14]**1 * y[7]**-1 * y[11]**-1 - 1*k[15] * y[13]**-1 * y[14]**-1 * y[7]**1 * y[11]**1 + 1*k[28] * y[6]**1 * y[14]**1 * y[7]**-1 * y[12]**-1 - 1*k[29] * y[6]**-1 * y[14]**-1 * y[7]**1 * y[12]**1 - 1*k[30] * y[7]**-1 * y[14]**-1 * y[6]**1 * y[9]**1 + 1*k[31] * y[7]**1 * y[14]**1 * y[6]**-1 * y[9]**-1 - 2*k[32] * y[14]**-2 * y[9]**1 * y[12]**1 + 2*k[33] * y[14]**2 * y[9]**-1 * y[12]**-1 + 1*k[36] * y[11]**1 * y[14]**1 * y[6]**-1 * y[19]**-1 - 1*k[37] * y[11]**-1 * y[14]**-1 * y[6]**1 * y[19]**1 + 1*k[38] * y[15]**1 * y[14]**1 * y[7]**-1 * y[19]**-1 - 1*k[39] * y[15]**-1 * y[14]**-1 * y[7]**1 * y[19]**1
    # HCO-Ni
    dydx[15] = + 1*k[16] * y[6]**1 * y[15]**1 * y[7]**-1 * y[11]**-1 - 1*k[17] * y[6]**-1 * y[15]**-1 * y[7]**1 * y[11]**1 - 1*k[18] * y[6]**-1 * y[15]**-1 * y[16]**1 * y[12]**1 + 1*k[19] * y[6]**1 * y[15]**1 * y[16]**-1 * y[12]**-1 + 1*k[38] * y[15]**1 * y[14]**1 * y[7]**-1 * y[19]**-1 - 1*k[39] * y[15]**-1 * y[14]**-1 * y[7]**1 * y[19]**1
    # CH-Ni
    dydx[16] = + 1*k[18] * y[16]**1 * y[12]**1 * y[6]**-1 * y[15]**-1 - 1*k[19] * y[16]**-1 * y[12]**-1 * y[6]**1 * y[15]**1 + 1*k[20] * y[6]**1 * y[16]**1 * y[7]**-1 * y[13]**-1 - 1*k[21] * y[6]**-1 * y[16]**-1 * y[7]**1 * y[13]**1 - 1*k[22] * y[7]**-1 * y[16]**-1 * y[6]**1 * y[17]**1 + 1*k[23] * y[7]**1 * y[16]**1 * y[6]**-1 * y[17]**-1
    # CH2-Ni
    dydx[17] = + 1*k[22] * y[6]**1 * y[17]**1 * y[7]**-1 * y[16]**-1 - 1*k[23] * y[6]**-1 * y[17]**-1 * y[7]**1 * y[16]**1 - 1*k[24] * y[7]**-1 * y[17]**-1 * y[6]**1 * y[18]**1 + 1*k[25] * y[7]**1 * y[17]**1 * y[6]**-1 * y[18]**-1
    # CH3-Ni
    dydx[18] = + 1*k[24] * y[6]**1 * y[18]**1 * y[7]**-1 * y[17]**-1 - 1*k[25] * y[6]**-1 * y[18]**-1 * y[7]**1 * y[17]**1 - 1*k[26] * y[7]**-1 * y[18]**-1 * y[6]**1 * y[8]**1 + 1*k[27] * y[7]**1 * y[18]**1 * y[6]**-1 * y[8]**-1
    # COOH-Ni
    dydx[19] = + 1*k[34] * y[6]**1 * y[19]**1 * y[7]**-1 * y[10]**-1 - 1*k[35] * y[6]**-1 * y[19]**-1 * y[7]**1 * y[10]**1 - 1*k[36] * y[6]**-1 * y[19]**-1 * y[11]**1 * y[14]**1 + 1*k[37] * y[6]**1 * y[19]**1 * y[11]**-1 * y[14]**-1 - 1*k[38] * y[7]**-1 * y[19]**-1 * y[15]**1 * y[14]**1 + 1*k[39] * y[7]**1 * y[19]**1 * y[15]**-1 * y[14]**-1
    
    return dydx


def ODESolver_T(y, x):
    dydx = np.zeros(13)
    
    dydx[0] =(1 * y[0])/2.55e-05
    dydx[1] =(1 * y[1])/2.55e-05
    dydx[2] =(1 * y[2])/2.55e-05
    dydx[3] =(1 * y[3])/2.55e-05
    dydx[4] =(1 * y[4])/2.55e-05
    dydx[5] =(1 * y[5])/2.55e-05
    dydx[6] =(1 * y[6])/2.55e-05
    dydx[7] =(1 * y[7])/2.55e-05
    dydx[8] =(1 * y[8])/2.55e-05
    dydx[9] =(1 * y[9])/2.55e-05
    dydx[10] =(1 * y[10])/2.55e-05
    dydx[11] =(1 * y[11])/2.55e-05
    dydx[12] =(1 * y[12])/2.55e-05
    
    return dydx


start_time = time.time()

#CALCULATION OF THE PRODUCATIONRATE s
y0_S = np.array([0.1, 14.5, 0.1, 0.1, 14.5, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])

#solution = solve_ivp(ODESolver, (x_start, x_end), y0, x_eval=np.linspace(x_start, x_end, num=3))

x_start = 0.0
x_end = 1.0
x_eval=np.linspace(x_start, x_end, num=5)
solution_S = odeint(ODESolver_S, y0_S, x_eval)

#CALCULATION OF THETA
y0_T = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])
x_start = 0.0
x_end = 1.0
x_eval = np.linspace(x_start, x_end, num=2)
solution_T = odeint(ODESolver_T, y0_T, x_eval)

#CALCULATION OF REACTION RATE COEFFICIENT k
with open("C:/Users/smmcvoel/Documents/GitHub/Abschlussarbeiten_Behr/VoelkenrathMA/linkml/Methanation_PFR_DataSheet.yaml", "r") as file:
    data = yaml.safe_load(file)
    
mechanism = data[2]["ChemicalReaction"][0]    

R = 8.314
T = data[0]["Mixture"][0]["temperature"]

coefficients = {}
for i in range(len(mechanism)):
    coefficient = f"k{i}"
    EA = mechanism[i]["reactions"][0]["EA"] * 1000 # kJ/mol --> J/mol
    b = mechanism[i]["reactions"][0]["beta"]
    
    if "epsilon" in mechanism[i]["reactions"][0]:
        eps = mechanism[i]["reactions"][0]["epsilon"]
        theta = 1
        if "S0" in mechanism[i]["reactions"][0]:
            A = mechanism[i]["reactions"][0]["S0"]
        elif "A_cm_units" in mechanism[i]["reactions"][0]:
            A = mechanism[i]["reactions"][0]["A_cm_units"]
        value = A * math.pow(T, b) * math.exp(-EA/(R*T)) * math.exp(-EA/(R*T))
        coefficients[coefficient] = value
    else:
        if "S0" in mechanism[i]["reactions"][0]:
            A = mechanism[i]["reactions"][0]["S0"]
        elif "A_cm_units" in mechanism[i]["reactions"][0]:
            A = mechanism[i]["reactions"][0]["A_cm_units"]
        value = A * math.pow(T, b) * math.exp(-EA/(R*T))
        coefficients[coefficient] = value

end_time = time.time()
elapsed_time = end_time - start_time
print(f"Das Skript benötigte {elapsed_time:.2f} Sekunden, um durchzulaufen.")
